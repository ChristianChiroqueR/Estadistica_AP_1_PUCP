[["index.html", "Estadística para el Análisis Político I Sesión 1 Introducción 1.1 Los pilares de la Estadística 1.2 Elementos básicos en el R 1.3 Las Estructuras en el R", " Estadística para el Análisis Político I Docente: Christian Chiroque Ruiz 2023-04-09 Sesión 1 Introducción 1.1 Los pilares de la Estadística 1.1.1 Definición La estadística es una rama de las matemáticas que se enfoca en el análisis, interpretación y presentación de datos. Los estadísticos se centran en la teoría estadística y en el desarrollo de métodos para analizar datos. Los estadísticos también pueden diseñar estudios experimentales para recopilar datos de una manera rigurosa y controlada. En términos generales, la estadística se divide en dos áreas principales: estadística descriptiva y estadística inferencial. La estadística descriptiva se centra en la organización y presentación de datos, mientras que la estadística inferencial se ocupa de la inferencia y la predicción a partir de datos. 1.1.2 Unidad de análisis En estadística, una unidad de análisis se refiere a la entidad o elemento individual que se estudia en una investigación o estudio estadístico. Esta entidad puede ser una persona, un animal, un objeto, una organización, un evento, una muestra, etc. Dependiendo del objetivo del estudio y de la pregunta que se pretenda responder, la unidad de análisis puede variar. Es importante tener en cuenta que la elección de la unidad de análisis puede tener un impacto significativo en los resultados de un estudio estadístico. Por lo tanto, es fundamental definir claramente la unidad de análisis y asegurarse de que sea coherente con los objetivos y la hipótesis de la investigación. 1.1.3 Tipos de variable En estadística, una variable es cualquier característica, propiedad o atributo que puede tomar diferentes valores y que se puede medir o observar en los elementos de una población o muestra. Distinguimos los tipos de variables porque diferentes métodos estadísticos pueden ser aplicados a cada tipo. Variables numéricas: Se expresan en términos numéricos y se pueden medir con precisión. Los valores representan diferentes magnitudes (cantidad) de la variable. Ejemplos: ingreso anual, número de sobrinos, edad y número de años de estudio. También denominadas cuantitativas. Variables categóricas: No se expresan en términos numéricos y no se pueden medir con precisión. Se miden utilizando un conjunto de categorías o etiquetas. Ejemplo: estado civil, departamento de residencia, tipo de música favorita. También denominadas cualitativas. 1.1.4 Escalas de medición Identifica cómo es medida la variable. Para las variables numéricas: Se utiliza la escala de intervalo: Existe una distancia específica entre cada par de valores y es comparable. Ej: Existe la misma distancia entre 1500 y 1000 soles que entre 1000 soles y 500 soles. Para las variables categóricas: Se utiliza: Escala nominal: Si las categorías no están ordenadas (no hay un alto o bajo, o comparación de intensidad). Las distintas categorías son llamadas “niveles”. Escala ordinal: Es un caso particular. No son nominales porque tienen un orden natural y no son numéricas porque usan etiquetas (niveles). Ej: Nivel de satisfacción con el Poder Ejecutivo. 1.2 Elementos básicos en el R Vamos a examinar la clase de algunos de los elementos más básicos en R: los números, los caracteres y los elementos lógicos. class(1.5) ## [1] &quot;numeric&quot; # Para escribir valores character siempre entre comillas class(&quot;rojo&quot;) ## [1] &quot;character&quot; # Para escribir valores booleanos siempre usar mayúscula. class(TRUE) ## [1] &quot;logical&quot; En R, los datos pueden ser coercionados, es decir, forzados, para transformarlos de un tipo a otro. as.numeric(&quot;5&quot;) ## [1] 5 as.integer(5.1) ## [1] 5 as.character(5) ## [1] &quot;5&quot; Podemos asignarles etiquetas (nombres) a esos elementos. x &lt;- 5.5 class(x) ## [1] &quot;numeric&quot; y &lt;- &quot;perro&quot; class(y) ## [1] &quot;character&quot; z &lt;- TRUE class(z) ## [1] &quot;logical&quot; Considerar que también se puede usar el signo “=”. Sin embargo, tiene algunas diferencias en cuanto a su uso en el programa. Por ejemplo, uno puede escribir esta sentencia X &lt;-5+5 y 5+5-&gt;X. Sin embargo, el sistema no acepta lo siguiente: 5+5 = X 1.3 Las Estructuras en el R 1.3.1 Los vectores Un vector es una colección de uno o más datos del mismo tipo. Tipo. Un vector tiene el mismo tipo que los datos que contiene. Si tenemos un vector que contiene datos de tipo numérico, el vector será también de tipo numérico. Los vectores son atómicos, pues sólo pueden contener datos de un sólo tipo, no es posible mezclar datos de tipos diferentes dentro de ellos. Largo. Es el número de elementos que contiene un vector. El largo es la única dimensión que tiene esta estructura de datos. NO TIENE DIMENSIÓN (dim) Ejemplo: Vamos a crear tres vectores: uno numérico, uno de caracter y uno lógico. Podemos utilizar la función length() para medir el largo de estos (cuántos elementos contiene). vector_numerico &lt;- c(1, 2, 3, 4, 5) length(vector_numerico) ## [1] 5 vector_caracter &lt;- c(&quot;arbol&quot;, &quot;casa&quot;, &quot;persona&quot;) length(vector_caracter) ## [1] 3 vector_logico&lt;- c(TRUE, TRUE, FALSE, FALSE, TRUE) length(vector_logico) ## [1] 5 También podemos utilizar la función class() para corroborar que cada vector tiene la misma clase de los elementos que contiene. class(vector_numerico) ## [1] &quot;numeric&quot; class(vector_caracter) ## [1] &quot;character&quot; class(vector_logico) ## [1] &quot;logical&quot; Tener en cuenta que los vectores también pueden tener valores perdidos (NA). vector_con_NA &lt;- c(1,2,3,NA,5) length(vector_con_NA) ## [1] 5 class(vector_con_NA) ## [1] &quot;numeric&quot; 1.3.2 Un vector especial: los factores Un factor es un tipo de datos específico en R. Puede ser descrito como un dato numérico representado por una etiqueta. Supongamos que tenemos un conjunto de datos que representan el género de personas encuestadas por teléfono, pero estos se encuentran capturados con los números 1 y 2. genero &lt;- c(1,1,1,2,2,1,2) El número 1 corresponde a Mujer y el 2 a Hombre. A diferencia del carácter, el factor tiene NIVELES (levels). Podemos crear un vector de tipo factor con la función factor(). genero_en_factor=factor(genero, levels= 1:2, labels=c(&quot;Mujer&quot;, &quot;Hombre&quot;)) genero_en_factor ## [1] Mujer Mujer Mujer Hombre Hombre ## [6] Mujer Hombre ## Levels: Mujer Hombre En la práctica, muchas veces vamos a ver las variables de tipo factor en nuestro análisis. Por ello, debes ser muy cuidadoso en la preparación previa que debes realizar a la base de datos antes de aplicar las funciones. Asimismo, un factor puede estar ordenado o no ordenado. Esto nos sirve, por ejemplo, para crear variables de tipo ordinal. Podemos indicarlo ello, con el argumento ordered=. Veamos: confianza=c(1, 1, 3, 2) confianza_en_factor=factor(confianza, levels= 1:3, labels=c(&quot;Bajo&quot;, &quot;Medio&quot;, &quot;Alto&quot;), ordered = TRUE) confianza_en_factor ## [1] Bajo Bajo Alto Medio ## Levels: Bajo &lt; Medio &lt; Alto Vemos que nos indica los niveles, pero en este caso están ordenados de menor a mayor. 1.3.3 Data frames Los data frames son estructuras de datos de dos dimensiones (rectangulares) que pueden contener datos de diferentes tipos, por lo tanto, son heterogéneas. Compuesto por vectores. Estructura más usada para ciencia de datos. Mientras que en una matriz todas las celdas deben contener datos del mismo tipo, los renglones de un data frame admiten datos de distintos tipos, pero sus columnas conservan la restricción de contener datos de un sólo tipo. En términos generales, los renglones en un data frame representan casos, individuos u observaciones, mientras que las columnas representan atributos, rasgos o variables. mi_df &lt;- data.frame( &quot;variable1&quot; = 1:3, &quot;variable2&quot; = c(1.2, 3.4, 4.5), &quot;variable3&quot; = as.character(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)), &quot;variable4&quot; = as.factor(c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)) ) #Para crear un DT los vectores de insumo deben ser del mismo largo mi_df ## variable1 variable2 variable3 ## 1 1 1.2 a ## 2 2 3.4 b ## 3 3 4.5 c ## variable4 ## 1 1 ## 2 2 ## 3 3 str(mi_df) ## &#39;data.frame&#39;: 3 obs. of 4 variables: ## $ variable1: int 1 2 3 ## $ variable2: num 1.2 3.4 4.5 ## $ variable3: chr &quot;a&quot; &quot;b&quot; &quot;c&quot; ## $ variable4: Factor w/ 3 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;: 1 2 3 1.3.4 Propiedades Un data.frame tiene: Dimensión: un número de filas y un número de columnas. dim(mi_df) #FILAS Y COLUMNAS ## [1] 3 4 Largo: número de casos length(mi_df) ## [1] 4 Nombre de columnas: Podemos consultar el nombre de las columnas (variables) con la función names(). names(mi_df) ## [1] &quot;variable1&quot; &quot;variable2&quot; &quot;variable3&quot; ## [4] &quot;variable4&quot; 1.3.5 Índices Usar índices para obtener subconjuntos es el procedimiento más universal en R, pues funciona para todas las estructuras de datos. Un índice en R representa una posición. Cuando usamos índices le pedimos a R que extraiga de una estructura los datos que se encuentran en una o varias posiciones específicas dentro de ella. Ejemplos: Seleccionar la columna 2: mi_df [,2] ## [1] 1.2 3.4 4.5 Para seleccionar una columna, también podemos usar el símbolo de $. Es bastante usado en varias funciones. mi_df$variable2 ## [1] 1.2 3.4 4.5 Seleccionar el caso (fila) 2: mi_df [2,] ## variable1 variable2 variable3 ## 2 2 3.4 b ## variable4 ## 2 2 Seleccionar el elemento que se encuentra en la fila 2 y la columna 2: mi_df [2,2] ## [1] 3.4 "],["manipulación-de-datos-y-estadísticos-descriptivos.html", "Sesión 2 Manipulación de datos y estadísticos descriptivos 2.1 Preparación 2.2 Base de datos 2.3 Estadísticos de tendencia central 2.4 Estadísticos de posición 2.5 Estadísticos de dispersión", " Sesión 2 Manipulación de datos y estadísticos descriptivos 2.1 Preparación 2.1.1 Entorno de trabajo Crea la carpeta donde guardarás toda la información creada. Te recomiendo que para cada clase crees un Proyecto de R. Eso te permitirá mantener un orden. Una vez creado, puedes crear un R Markdown como este para empezar a trabajar. 2.1.2 Paquetes a utilizar Ahora bien, DE PREFERENCIA, siempre que inicies un R Markdown o Script en el R Studio tienes que abrir los paquetes que vas a utilizar. En este caso vamos a utilizar el paquete Tidyverse (que ya incluye muchos otros paquetes ya explicados). Puedes abrirlo con el siguiente comando: # install.packages(&quot;tidyverse&quot;) library(tidyverse) Recuerda que la función library(nombre_del_paquete) sirve para abrir los paquetes YA INSTALADOS. Si te sale un mensaje que dice que “no existe el paquete” debes instalarlo con la función install.packages(línea previa). 2.2 Base de datos 2.2.1 Importación Para la parte I, II y III de esta clase utilizaremos la base de datos de los resultados de las elecciones presidenciales del 2011. Vamos a realizar un breve reporte sobre los porcentajes obtenidos por la organización política “Gana Perú”. library(readxl) elecciones &lt;- read_excel(&quot;RESULTADOS_EG_PRESIDENCIAL_2011.xls&quot;) Luego de abrir una base de datos, siempre te recomiendo darle un primer vistazo. Puedes ver las primeras diez filas con: head(elecciones, 10) ## # A tibble: 10 × 11 ## UBIGEO DEPARTAMENTO PROVINCIA DISTR…¹ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 010101 AMAZONAS CHACHAPO… CHACHA… ## 2 010101 AMAZONAS CHACHAPO… CHACHA… ## 3 010101 AMAZONAS CHACHAPO… CHACHA… ## 4 010101 AMAZONAS CHACHAPO… CHACHA… ## 5 010101 AMAZONAS CHACHAPO… CHACHA… ## 6 010101 AMAZONAS CHACHAPO… CHACHA… ## 7 010101 AMAZONAS CHACHAPO… CHACHA… ## 8 010101 AMAZONAS CHACHAPO… CHACHA… ## 9 010101 AMAZONAS CHACHAPO… CHACHA… ## 10 010101 AMAZONAS CHACHAPO… CHACHA… ## # … with 7 more variables: ## # ORGANIZACIÓN_POLITICA &lt;chr&gt;, ## # VOTOS_VALIDOS_OP &lt;dbl&gt;, ## # VOTOS_VALIDOS &lt;dbl&gt;, ## # VOTOS_BLANCO &lt;dbl&gt;, ## # VOTOS_NULOS &lt;dbl&gt;, ## # NUMERO_ELECTORES &lt;dbl&gt;, … También puedes hacerle click en Environment o colocar: #View(elecciones) 2.2.2 Verificar el tipo de variable Veamos las variables, podemos utilizar la función names(nombre_de_data) names(elecciones) ## [1] &quot;UBIGEO&quot; ## [2] &quot;DEPARTAMENTO&quot; ## [3] &quot;PROVINCIA&quot; ## [4] &quot;DISTRITO&quot; ## [5] &quot;ORGANIZACIÓN_POLITICA&quot; ## [6] &quot;VOTOS_VALIDOS_OP&quot; ## [7] &quot;VOTOS_VALIDOS&quot; ## [8] &quot;VOTOS_BLANCO&quot; ## [9] &quot;VOTOS_NULOS&quot; ## [10] &quot;NUMERO_ELECTORES&quot; ## [11] &quot;VOTOS_EMITIDOS&quot; Puedes editar los nombres si deseas. En este caso vamos a cambiar el nombre de la variable ORGANIZACIÓN_POLITICA por ORG_POL. elecciones&lt;- elecciones %&gt;% rename(ORG_POL=ORGANIZACIÓN_POLITICA) Observación: Ten en cuenta que aquí estamos sobre escribiendo. Veamos si el formato es adecuado. str(elecciones) ## tibble [23,958 × 11] (S3: tbl_df/tbl/data.frame) ## $ UBIGEO : chr [1:23958] &quot;010101&quot; &quot;010101&quot; &quot;010101&quot; &quot;010101&quot; ... ## $ DEPARTAMENTO : chr [1:23958] &quot;AMAZONAS&quot; &quot;AMAZONAS&quot; &quot;AMAZONAS&quot; &quot;AMAZONAS&quot; ... ## $ PROVINCIA : chr [1:23958] &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; ... ## $ DISTRITO : chr [1:23958] &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; &quot;CHACHAPOYAS&quot; ... ## $ ORG_POL : chr [1:23958] &quot;FUERZA NACIONAL&quot; &quot;PARTIDO POLITICO ADELANTE&quot; &quot;DESPERTAR NACIONAL&quot; &quot;GANA PERU&quot; ... ## $ VOTOS_VALIDOS_OP: num [1:23958] 6 24 35 2971 7 ... ## $ VOTOS_VALIDOS : num [1:23958] 11148 11148 11148 11148 11148 ... ## $ VOTOS_BLANCO : num [1:23958] 1034 1034 1034 1034 1034 ... ## $ VOTOS_NULOS : num [1:23958] 340 340 340 340 340 340 340 340 340 340 ... ## $ NUMERO_ELECTORES: num [1:23958] 15748 15748 15748 15748 15748 ... ## $ VOTOS_EMITIDOS : num [1:23958] 12522 12522 12522 12522 12522 ... Ok, los caracteres están como chr y las variables numéricas como num. 2.2.3 Creación de subset Aquí nos debemos preguntar: a lo largo de nuestro trabajo, vamos a utilizar toda la data o sólo una parte? En este caso puntual, sólo vamos a utilizar aquellos resultados de la organización política Gana Perú. Por ello, vamos a hacer un filtro con ese criterio y vamos a **crear un subset o una data ya filtrada”. A esta data la llamaremos elecciones_GN. elecciones_GN &lt;- elecciones%&gt;% filter(ORG_POL==&quot;GANA PERU&quot;) 2.3 Estadísticos de tendencia central Como nuestro objetivo es explorar el porcentaje de votos válidos obtenidos por Gana Perú, vamos a crear esa variable en base a dos variable observables: el número de votos obtenidos y el número total de votos válidos. Utilizamos la función mutate(). elecciones_GN&lt;-elecciones_GN %&gt;% mutate(porc.voto=VOTOS_VALIDOS_OP/VOTOS_VALIDOS*100) Ahora podemos calculas los tres estadísticos de tendencia central con la función summarise(). elecciones_GN%&gt;% summarise(Media=mean(porc.voto, na.rm = TRUE), Mediana=median(porc.voto, na.rm = TRUE)) ## # A tibble: 1 × 2 ## Media Mediana ## &lt;dbl&gt; &lt;dbl&gt; ## 1 38.9 35.1 # Recuerda que colocamos na.rm = TRUE para que haga el cálculo omitiendo # aquellas celdas vacías (valores perdidos) 2.4 Estadísticos de posición 2.4.1 Percentiles Los estadísticos de posición son medidas que indican la posición relativa de un valor dentro de un conjunto de datos ordenados de menor a mayor. Los estadísticos de posición más utilizados son los percentiles (y sus derivados que son los cuartiles y deciles). Los estadísticos de posición son útiles para resumir los datos y obtener información sobre la distribución de los mismos. Se utilizan para describir la dispersión de los datos alrededor de la mediana, así como identificar valores atípicos o extremos en el conjunto de datos. Para calcular un determinado percentil podemos solicitarlo utilizando la función summarise() junto con quantile(). Vamos a solicitar los cuartiles (el percentil 25, 50 y 75) de la variable porc.voto: elecciones_GN %&gt;% summarise(P25=quantile(porc.voto, 0.25, na.rm=TRUE), P50=quantile(porc.voto, 0.50, na.rm=TRUE), P75=quantile(porc.voto, 0.75, na.rm=TRUE)) ## # A tibble: 1 × 3 ## P25 P50 P75 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21.6 35.1 56.0 Si son muchos percentiles también puedes usar la función concatenar c(), como en el siguiente ejemplo: elecciones_GN %&gt;% summarise(quantile(porc.voto, c(0.10, 0.25,0.50, 0.75, 0.90), na.rm=TRUE)) ## # A tibble: 5 × 1 ## quantile(porc.voto, c(0.1, 0.25, 0.5…¹ ## &lt;dbl&gt; ## 1 11.4 ## 2 21.6 ## 3 35.1 ## 4 56.0 ## 5 70.7 ## # … with abbreviated variable name ## # ¹​`quantile(porc.voto, c(0.1, 0.25, 0.5, 0.75, 0.9), na.rm = TRUE)` 2.5 Estadísticos de dispersión Las medidas de dispersión son una serie de estadísticos que nos permiten conocer la variabilidad o amplitud de los datos en un conjunto de observaciones. Estas medidas nos indican cuánto se alejan los valores de la media, la mediana o cualquier otro estadístico de tendencia central, lo que es de gran utilidad para entender la homogeneidad o heterogeneidad de la distribución de los datos. Las medidas de dispersión más comunes son el rango, la varianza, la desviación estándar, el rango intercuartílico y el coeficiente de variación. 2.5.1 El Rango El rango es una medida de dispersión que se utiliza para determinar la amplitud total de un conjunto de datos. Es la diferencia entre el valor máximo y el valor mínimo en un conjunto de datos. Es una medida muy sencilla de calcular y proporciona una idea general de la variabilidad de los datos. Sin embargo, no toma en cuenta la distribución de los datos en el conjunto, lo que puede hacer que la medida sea menos informativa en ciertos casos. elecciones_GN %&gt;% filter(ORG_POL==&quot;GANA PERU&quot;) %&gt;% summarise(Rango=max(porc.voto, na.rm=TRUE)-min(porc.voto, na.rm=TRUE)) ## # A tibble: 1 × 1 ## Rango ## &lt;dbl&gt; ## 1 98.1 En este caso vemos que los valores de la variable porc.voto tiene un rango de 98.1 unidades (porcentuales) . 2.5.2 La Varianza La varianza es una medida de dispersión que indica qué tan dispersos están los datos con respecto a su media. \\[\\sigma^2 = \\frac{\\sum_{i=1}^n (x_i - \\mu)^2}{n}\\] Matemáticamente, la varianza se define como la media aritmética de los cuadrados de las diferencias entre cada valor de la variable y la media. Lo calculamos utilizando la función var(): elecciones_GN %&gt;% summarise(Varianza=var(porc.voto, na.rm=TRUE)) ## # A tibble: 1 × 1 ## Varianza ## &lt;dbl&gt; ## 1 472. En este ejemplo, el porcentaje de los Votos obtenidos por Gana Perú tiene una dispersión de 472 entre los distritos del Perú. Recuerda que la varianza puede servir a la hora de comparar dos variable que están medidas en las mismas unidades (como si comparáramos este porcentaje vs el obtenido por Fuerza 2011). Si deseamos analizar una única variable es más fácil ver la Desviación Estándar. 2.5.3 La Desviación Estándar Es la medida de dispersión más común y se calcula como la raíz cuadrada de la varianza. Nos indica cuánto se desvían los valores de la distribución con respecto a la media. \\[\\sqrt{\\text{Var}(X)}\\] La desviación estándar se expresa en las mismas unidades que los datos originales, lo que la hace fácilmente interpretable. Una desviación estándar pequeña indica que los datos están muy concentrados alrededor de la media, mientras que una desviación estándar grande indica que los datos están más dispersos y que existe una mayor variabilidad en los mismos. Lo calculamos usando la función sd(): elecciones_GN %&gt;% summarise(Desv_est=sd(porc.voto, na.rm=TRUE)) ## # A tibble: 1 × 1 ## Desv_est ## &lt;dbl&gt; ## 1 21.7 La forma de interpretación es que los valores observados están en promedio a una distancia de 21 unidades de la media. 2.5.4 El Rango intercuartílico El rango intercuartil (IQR por sus siglas en inglés) es una medida de dispersión utilizada en estadística que se define como la diferencia entre el tercer y primer cuartil de un conjunto de datos. En otras palabras, el IQR mide la distancia entre el 25% y el 75% de los datos ordenados de menor a mayor. El IQR es una medida de dispersión robusta que no se ve afectada por valores atípicos o extremos en los datos, a diferencia del rango o la desviación estándar. Es útil para resumir la variabilidad de los datos en un intervalo de valores que contiene la mayor parte de los datos y que no está influenciado por los valores extremos. El IQR se puede utilizar para identificar valores atípicos o para comparar la variabilidad entre diferentes conjuntos de datos. Lo calculamos utilizando la función IQR(): elecciones_GN %&gt;% summarise(IQR=IQR(porc.voto, na.rm=TRUE)) ## # A tibble: 1 × 1 ## IQR ## &lt;dbl&gt; ## 1 34.4 En este caso vemos que el IQR de la variable porc.voto es de 34.4. Es decir, la distancia entre el primer cuartil y el tercer cuartil es de 34 unidades en la escala de la variable (porcentaje). 2.5.5 Curvas de distribución de frecuencias Las curvas de distribución son representaciones gráficas de la distribución de una variable aleatoria. Estas curvas se utilizan para mostrar cómo se distribuyen los valores de una variable en un conjunto de datos. El principal objetivo examinar las posiciones relativas de la media, la mediana y la moda, para estimar la FORMA DE UNA DISTRIBUCIÓN DE FRECUENCIAS. Tenemos dos grandes opciones: Distribución normal: Curva de distribución de frecuencias donde la media, la mediana y la moda de una variable son iguales entre sí y la distribución de la puntuaciones tiene forma de campana. Distribución sesgada: Curva de distribución de frecuencias en la cual la media, la mediana y la moda de una variable son desiguales y algunos de los sujetos tienen puntuaciones sumamente altas o bajas. Ahora veamos nuestro ejemplo, a qué curva de distribución se asemejará? Vemos que nuestra variable de Porcentaje de votos valídos obtenido por Gana Perú a nivel distrital, posee una distribución con un sesgo positivo. Veamos si es cierto la teoría. Grafiquemos la media (38.90), mediana (35.13) y moda (27.00) en dicha curva de distribución. Corroboramos lo explicitado por la teoría en cuento a la relación entre el sesgo y el posicionamiento de los estadísticos de tendencia central. "],["visualización-de-datos-con-ggplot2.html", "Sesión 3 Visualización de datos con ggplot2 3.1 Base de datos 3.2 ", " Sesión 3 Visualización de datos con ggplot2 3.1 Base de datos 3.2 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
